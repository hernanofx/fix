#!/usr/bin/env node

const { execSync } = require('child_process');
const { PrismaClient } = require('@prisma/client');

console.log('üîç Diagn√≥stico completo de conexi√≥n a base de datos');
console.log('================================================\n');

// 1. Verificar variables de entorno
console.log('1Ô∏è‚É£ Verificando variables de entorno...');
console.log('DATABASE_URL configurada:', process.env.DATABASE_URL ? '‚úÖ' : '‚ùå');

if (!process.env.DATABASE_URL) {
    console.error('‚ùå DATABASE_URL no est√° configurada');
    process.exit(1);
}

// 2. Analizar URL de la base de datos
console.log('\n2Ô∏è‚É£ Analizando configuraci√≥n de base de datos...');
try {
    const url = new URL(process.env.DATABASE_URL);
    console.log(`üîó Protocolo: ${url.protocol}`);
    console.log(`üè† Host: ${url.hostname}`);
    console.log(`üîå Puerto: ${url.port || '5432 (default)'}`);
    console.log(`üë§ Usuario: ${url.username}`);
    console.log(`üóÑÔ∏è Base de datos: ${url.pathname.substring(1)}`);

    // Verificar par√°metros de conexi√≥n
    const params = url.searchParams;
    console.log('\n‚öôÔ∏è Par√°metros de conexi√≥n:');
    if (params.has('connection_limit')) {
        console.log(`   - connection_limit: ${params.get('connection_limit')}`);
    } else {
        console.log('   ‚ö†Ô∏è connection_limit no configurado (recomendado: 3-5)');
    }

    if (params.has('connect_timeout')) {
        console.log(`   - connect_timeout: ${params.get('connect_timeout')}s`);
    } else {
        console.log('   ‚ö†Ô∏è connect_timeout no configurado (recomendado: 10s)');
    }

    if (params.has('pool_timeout')) {
        console.log(`   - pool_timeout: ${params.get('pool_timeout')}s`);
    } else {
        console.log('   ‚ö†Ô∏è pool_timeout no configurado (recomendado: 20s)');
    }
} catch (error) {
    console.error('‚ùå Error al analizar DATABASE_URL:', error.message);
    process.exit(1);
}

// 3. Probar conexi√≥n b√°sica
console.log('\n3Ô∏è‚É£ Probando conexi√≥n b√°sica...');
const prisma = new PrismaClient({
    log: ['error', 'warn', 'info'],
});

async function runDiagnostics() {
    try {
        console.log('‚è≥ Intentando conectar...');

        const startTime = Date.now();
        await prisma.$queryRaw`SELECT 1 as test, version() as version`;
        const latency = Date.now() - startTime;

        console.log('‚úÖ Conexi√≥n exitosa');
        console.log(`‚ö° Latencia: ${latency}ms`);

        // 4. Verificar esquema de base de datos
        console.log('\n4Ô∏è‚É£ Verificando esquema de base de datos...');
        try {
            const tables = await prisma.$queryRaw`
                SELECT table_name
                FROM information_schema.tables
                WHERE table_schema = 'public'
                ORDER BY table_name
            `;

            console.log(`üìä Tablas encontradas: ${tables.length}`);
            if (tables.length > 0) {
                console.log('   Tablas principales:');
                tables.slice(0, 5).forEach(table => {
                    console.log(`   - ${table.table_name}`);
                });
                if (tables.length > 5) {
                    console.log(`   ... y ${tables.length - 5} m√°s`);
                }
            }
        } catch (schemaError) {
            console.log('‚ö†Ô∏è No se pudo verificar esquema:', schemaError.message);
        }

        // 5. Verificar permisos
        console.log('\n5Ô∏è‚É£ Verificando permisos...');
        try {
            await prisma.$queryRaw`SELECT * FROM users LIMIT 1`;
            console.log('‚úÖ Permisos de lectura: OK');
        } catch (permError) {
            console.log('‚ö†Ô∏è Permisos de lectura:', permError.message);
        }

        console.log('\nüéâ Diagn√≥stico completado exitosamente');

    } catch (error) {
        console.error('\n‚ùå Error de conexi√≥n:', error.message);
        console.error('üîç C√≥digo de error:', error.code || 'Desconocido');
        console.error('üí° Posibles causas:');
        console.error('   - La base de datos no est√° ejecut√°ndose');
        console.error('   - Las credenciales son incorrectas');
        console.error('   - El host o puerto son incorrectos');
        console.error('   - Problemas de red o firewall');

        process.exit(1);
    } finally {
        await prisma.$disconnect();
    }
}

runDiagnostics();