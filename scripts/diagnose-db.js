#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');

console.log('üîç Diagn√≥stico de base de datos Pix...');

// Funci√≥n para ejecutar comandos de forma segura
function executeCommand(command, description) {
    try {
        console.log(`üîÑ ${description}...`);
        const result = execSync(command, {
            encoding: 'utf8',
            timeout: 30000,
            env: {
                ...process.env,
                NODE_ENV: 'production',
                DATABASE_URL: process.env.DATABASE_URL
            }
        });
        console.log(`‚úÖ ${description} completado`);
        return { success: true, output: result };
    } catch (error) {
        console.log(`‚ùå ${description} fall√≥: ${error.message}`);
        return { success: false, error: error.message };
    }
}

// Funci√≥n para verificar conectividad
async function checkConnectivity() {
    console.log('\nüì° Verificando conectividad a la base de datos...');

    if (!process.env.DATABASE_URL) {
        console.error('‚ùå DATABASE_URL no configurada');
        return false;
    }

    // Extraer informaci√≥n de la URL
    const url = new URL(process.env.DATABASE_URL);
    console.log(`üåê Host: ${url.hostname}`);
    console.log(`üîå Puerto: ${url.port}`);
    console.log(`üìä Base de datos: ${url.pathname.substring(1)}`);

    // Intentar conexi√≥n simple
    const connectionTest = executeCommand(
        'node scripts/test-db-connection.js',
        'Probando conexi√≥n b√°sica'
    );

    if (connectionTest.success) {
        console.log('‚úÖ Conexi√≥n a base de datos exitosa');
        return true;
    } else {
        console.log('‚ùå Error de conexi√≥n a base de datos');
        console.log('Detalle:', connectionTest.error);
        return false;
    }
}

// Funci√≥n para verificar esquema
function checkSchema() {
    console.log('\nüìã Verificando esquema de base de datos...');

    const schemaCheck = executeCommand(
        `npx prisma db push --preview-feature`,
        'Verificando esquema con Prisma'
    );

    if (schemaCheck.success) {
        console.log('‚úÖ Esquema de base de datos v√°lido');
    } else {
        console.log('‚ö†Ô∏è Posibles problemas con el esquema');
    }
}

// Funci√≥n para verificar migraciones
function checkMigrations() {
    console.log('\nüîÑ Verificando estado de migraciones...');

    const migrationCheck = executeCommand(
        `npx prisma migrate status`,
        'Verificando estado de migraciones'
    );

    if (migrationCheck.success) {
        console.log('‚úÖ Migraciones en buen estado');
    } else {
        console.log('‚ö†Ô∏è Posibles problemas con migraciones');
    }
}

// Funci√≥n para obtener estad√≠sticas
function getStats() {
    console.log('\nüìä Obteniendo estad√≠sticas de la base de datos...');

    const statsQuery = executeCommand(
        'node scripts/get-table-stats.js',
        'Obteniendo estad√≠sticas de tablas'
    );

    if (statsQuery.success) {
        console.log('üìà Estad√≠sticas obtenidas:');
        console.log(statsQuery.output);
    }
}

// Funci√≥n principal de diagn√≥stico
async function diagnoseDatabase() {
    console.log('ü©∫ Iniciando diagn√≥stico de base de datos...\n');

    // Verificar variables de entorno
    console.log('üîß Variables de entorno:');
    console.log(`DATABASE_URL: ${process.env.DATABASE_URL ? '‚úÖ Configurada' : '‚ùå No configurada'}`);
    console.log(`NODE_ENV: ${process.env.NODE_ENV || 'development'}`);
    console.log(`RUN_SEED: ${process.env.RUN_SEED || 'false'}`);
    console.log('');

    // Ejecutar verificaciones
    const isConnected = await checkConnectivity();
    if (isConnected) {
        checkSchema();
        checkMigrations();
        getStats();
    }

    // Recomendaciones
    console.log('\nüí° Recomendaciones:');
    if (!isConnected) {
        console.log('- Verificar que DATABASE_URL sea correcta');
        console.log('- Verificar que la base de datos est√© ejecut√°ndose');
        console.log('- Verificar credenciales de conexi√≥n');
        console.log('- Verificar que el puerto est√© abierto');
    } else {
        console.log('- Base de datos conectada correctamente');
        console.log('- Considerar configurar connection pooling para Railway');
        console.log('- Verificar l√≠mites de conexiones en el plan de Railway');
    }

    console.log('\nüéØ Diagn√≥stico completado');
}

// Ejecutar diagn√≥stico
diagnoseDatabase().catch(error => {
    console.error('‚ùå Error fatal en diagn√≥stico:', error);
    process.exit(1);
});